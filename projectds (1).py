# -*- coding: utf-8 -*-
"""ProjectDS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEfIKh2MC1zUSdnsZgkKea7hrrSOy8cl

#**Zika Virus Prediction and Analysis**
"""

import pandas as pd
import numpy as np
import io
from termcolor import colored
import pandas_datareader.data as web
import seaborn as sns
from scipy.stats import stats
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

from google.colab import files 

uploaded = files.upload()

#reading  csv file
df=pd.read_csv("/content/zika.csv")
df

# Printing nan values if any in value column
print(df[df.isnull().any(axis=1)])

#Dropping Nan values 
df=df.dropna()

#Checking if any nan value is remaining in dataset or not
print(df[df.isnull().any(axis=1)])

#Sorting Dataset on the basis of reporting date 
df.sort_values("report_date",axis=0,ascending=True,inplace=True,na_position='last')
df

#Checking types of data 
df.dtypes

#Plotting Data with x as reporting date and y as values
from matplotlib.pyplot import figure
x=df['report_date']
print(x)
y=(df['value'])
print(y)
fig, ((ax1)) = plt.subplots(1, 1,figsize=(44,30))
fig.suptitle('Changing Trends of Zika Virus',fontsize=20, fontweight ="bold")
n_bins=500
ax1.hist(x,bins =n_bins)

plt.xticks(rotation=90,fontsize=16)
plt.margins(0.002)

plt.figure(figsize=(3,3))

#Calculating daily percentage change
df['value']=df['value'].astype(float)
df['Day_perc_change'] = df['value'].pct_change()*100
df.dropna(axis = 0, inplace = True)
print('APPLE : \n', df.Day_perc_change.describe())

#Plotting daily percentage change
fig, (ax1) = plt.subplots(1, 1,figsize=(22,14))
fig.suptitle('(Daily Percentage Change)',fontsize=20, fontweight ="bold")
x = df['report_date']
y1 = df['Day_perc_change']
ax1.plot(x,y1)
ax1.set_title('Zika Virus')
plt.xticks(rotation=90,fontsize=16)
plt.margins(0.002)
plt.figure(figsize=(3,3))
plt.show()
print(colored('Daily cases Analysis and Visualization.', 'cyan', attrs=['bold']))

#Plotting trend frequency
def trend(x):
  if x > -0.5 and x <= 0.5:
    return 'Slight or No change'
  elif x > 0.5 and x <= 1:
    return 'Slight Positive'
  elif x > -1 and x <= -0.5:
    return 'Slight Negative'
  elif x > 1 and x <= 3:
    return 'Positive'
  elif x > -3 and x <= -1:
    return 'Negative'
  elif x > 3 and x <= 7:
    return 'Among top gainers'
  elif x > -7 and x <= -3:
    return 'Among top losers'
  elif x > 7:
    return 'Bull run'
  elif x <= -7:
    return 'Bear drop'

df['Trend']= np.zeros(df['Day_perc_change'].count())
df['Trend']= df['Day_perc_change'].apply(lambda x:trend(x))
print(df['Trend'])

#Pie Chart for trend frequency
fig, (ax1)= plt.subplots(1, 1,figsize=(22,12))
fig.suptitle('TREND FREQUENCY',fontsize=30, fontweight ="bold")

piedata1 = df.groupby('Trend')
pie_label1 = sorted([i for i in df.loc[:, 'Trend'].unique()])
ax1.pie(piedata1['Trend'].count(), labels = pie_label1, autopct = '%1.1f%%', radius = 1.2)
ax1.set_title('Zika', fontsize= 30)

n_bins = 10
fig, (ax1) = plt.subplots(1, 1,figsize=(22,15))
fig.suptitle('DAILY CASES HISTOGRAM',fontsize=20, fontweight ="bold")

x1 = df['Day_perc_change']


ax1.hist(x1,bins = n_bins)
ax1.set_title('Zika Virus')
plt.show()

#Linear regression using user defined functions
def estimate_coef(x, y): 
	n = np.size(x)+1
	m_x, m_y = np.mean(x), np.mean(y) 
 
	SS_xy = np.sum(y*x) - n*m_y*m_x 
	SS_xx = np.sum(x*x) - n*m_x*m_x 

	b_1 = SS_xy / SS_xx 
	b_0 = m_y - b_1*m_x 

	return(b_0, b_1) 

def plot_regression_line(x, y, b): 
	plt.scatter(x, y, color = "m") 
	y_pred = b[0] + b[1]*x 
	plt.plot(x, y_pred, color = "g") 
 
	plt.xlabel('x') 
	plt.ylabel('VALUES') 
	plt.show() 
 
fig, (ax1) = plt.subplots(1, 1,figsize=(25,17))
fig.suptitle(' LINEAR REGRESSION\nCASES PREDICTION USING USER DEFINED FUNCTIONS',fontsize=30, fontweight ="bold")
 
a = df.index
a = np.append(a,[np.size(a)+1])
b1 = estimate_coef(a, y)
ax1.scatter(a, y, edgecolor='w', label='Actual ') 
y_pred = b1[0] + b1[1]*a 
ax1.plot(a, y_pred, color='r', label='Predicted ') 
ax1.set_title('ZIKA VIRUS')
ax1.set_xlabel('index') 
ax1.set_ylabel('Closing prices') 
ax1.legend()

#Linear Regression using pre defined functions
fig,(ax1) = plt.subplots(1,1,figsize=(25,17))
fig.suptitle('LINEAR REGRESSION \nCASES PREDICTION USING IN-BUILT FUNCTIONS',fontsize=30, fontweight ="bold")

train1, test1 = train_test_split(df, test_size=0.20)
X_train1 = np.array(train1.index).reshape(-1, 1)
y_train1 = train1['value']
model = LinearRegression()
model.fit(X_train1, y_train1)
#plt.ylim((10,500))

plt.scatter(X_train1, y_train1, edgecolor='w', label='Actual')
plt.plot(X_train1, model.predict(X_train1), color='r', label='Predicted ')
plt.show()

"""**The prediction line of both user defined linear regression and predefined linear regression is almost same with slight changes and difference.
SO we can conclude that our predefined linear regression is having almost 70-80% of accuracy for predicting values.**
"""